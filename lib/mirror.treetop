grammar Mirror

  rule statements
    (spaces? statement spaces? "." spaces?)* <Statements>
  end
  
  rule statement
    message_expression
  end
  
  rule message_expression
    keyword_expression /
    binary_expression /
    unary_expression
  end
  
  rule keyword_expression
    variable:binary_expression? keywords:(spaces? keyword spaces expression:binary_expression)+ <KeywordExpression>
  end
  
  rule binary_expression
    variable:unary_expression spaces? selector:binary_selector spaces? expression:binary_expression <BinaryExpression> /
    unary_expression
  end
  
  rule unary_expression
     variable:primary selectors:(spaces selector:identifier !colon)+ <UnaryExpression> /
     primary
  end
  
  rule binary_selector
    special_character+
  end

  rule keyword
    identifier colon <Keyword>
  end
  
  rule primary
    "(" spaces? message_expression spaces? ")" <Primary> /
    block /
    variable /
    literal
  end
  
  rule block
    open_block 
      spaces? 
      parameters:(arguments:argument_list? temporaries:(spaces? colon spaces? list:argument_list)? separator)? 
      spaces? 
      statements 
      spaces? 
      close_block <Block>
  end
  
  rule argument_list
    (identifier spaces?)+ <Arguments>
  end
  
  rule variable
    identifier !colon <Variable>
  end
  
  rule argument
    identifier
  end
  
  rule literal
    numeric_literal /
    string_literal
  end
  
  rule numeric_literal
    decimal /
    integer
  end
  
  rule decimal
    sign? digits period digits <DecimalLiteral>
  end
  
  rule integer
    sign? digits <IntegerLiteral>
  end

	rule sign
		"-"
	end
	
	rule digits
		digit+
	end
    
  rule string_literal
    (quote (!quote .)* quote)+ <StringLiteral>
  end
  
  rule identifier
    [a-zA-Z]+
  end
  
  rule special_character
    "+" / "-" / "*" / "/" / "\\" / "~" / "<" / ">" / "=" / "@" / "%" / "&" / "?" / "!" / "," / "^"
  end
  
  rule digit
    [0-9]
  end

  rule quote
    "\""
  end
  
  rule period
    "."
  end
  
  rule colon
    ":"
  end
  
  rule comma
    ","
  end
  
  rule open_block
    "["
  end
    
  rule close_block
    "]"
  end
  
  rule separator
    "|"
  end
  
  rule spaces
    space* ("#" (!break .)* break+ space*)*
  end
  
  rule space
    [\r\n\t\s]
  end
  
  rule break
    [\r\n]
  end

end